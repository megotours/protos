syntax = "proto3";
package user;

option go_package = "proto/user";
import "proto/user/user_message.proto";

import "google/api/annotations.proto";

service UserService {
  rpc Find(FindUserRequest) returns (FindUserResponse) {
    option (google.api.http) = {
      get: "/v1/user"
    };
  }
  rpc GetById(GetByIdRequest) returns (UserDetails) {
    option (google.api.http) = {
      get: "/v1/user/getById"
    };
  }
  rpc GetByEmail(GetByEmailRequest) returns (UserDetails) {
    option (google.api.http) = {
        get: "/v1/user/getByEmail"
    };
  }
  rpc GetByPhone(GetByPhoneRequest) returns (UserDetails) {
    option (google.api.http) = {
      get: "/v1/user/getByPhone"
    };
  }
  rpc GetByToken(GetByTokenRequest) returns (UserDetails) {
    option (google.api.http) = {
      get: "/v1/user/getByToken"
    };
  }
  rpc Create(CreateUserRequest) returns (UserDetails) {
    option (google.api.http) = {
      post: "/v1/user"
    };
  }
  rpc Update(UpdateUserRequest) returns (UserDetails) {
    option (google.api.http) = {
      put: "/v1/user"
    };
  }
  rpc Delete(GetByIdRequest) returns (UserDetails) {
    option (google.api.http) = {
      delete: "/v1/user"
    };
  }

  rpc UpdateProfile(UpdateProfileRequest) returns(UserDetails) {
    option (google.api.http) = {
      put: "/v1/user/profile"
    };
  }
  rpc UpdateLang(UpdateLangRequest) returns(UpdateLangResponse) {
    option (google.api.http) = {
      put: "/v1/user/lang"
    };
  }
  rpc UpdateTheme(UpdateThemeRequest) returns(UpdateThemeResponse) {
    option (google.api.http) = {
      put: "/v1/user/theme"
    };
  }
  rpc UpdateEmail(UpdateEmailRequest) returns(UpdateEmailResponse) {
    option (google.api.http) = {
      put: "/v1/user/email"
    };
  }
  rpc UpdateEmailSendCode(UpdateEmailSendCodeRequest) returns(UpdateEmailSendCodeResponse) {
    option (google.api.http) = {
      put: "/v1/user/email/sendCode"
    };
  }
}



service UserRoleService {
  rpc Roles(Empty) returns (Empty) {
    option (google.api.http) = {
      get: "/v1/user/roles"
    };
  }
  rpc Create(Empty) returns (Empty) {
    option (google.api.http) = {
      post: "/v1/user/roles"
    };
  }
  rpc Delete(Empty) returns (Empty) {
    option (google.api.http) = {
      delete: "/v1/user/roles"
    };
  }
}

service SubscriptionsService {
  rpc SubscriptionsList(SubscriptionsListRequest) returns (SubscriptionsListResponse) {
    option (google.api.http) = {
      get: "/v1/subscriptions"
    };
  }
  rpc SubscribersList(SubscribersListRequest) returns (SubscribersListResponse) {
    option (google.api.http) = {
      get: "/v1/subscribers"
    };
  }
  rpc Subscribe(SubscribeRequest) returns (Empty) {
    option (google.api.http) = {
      post: "/v1/subscribe"
    };
  }
  rpc Unsubscribe(UnsubscribeRequest) returns (Empty) {
    option (google.api.http) = {
      delete: "/v1/subscribe"
    };
  }
  rpc Accept(AcceptRequest) returns (Empty) {
    option (google.api.http) = {
      post: "/v1/subscribe/accept"
    };
  }
  rpc Decline(DeclineRequest) returns (Empty) {
    option (google.api.http) = {
      post: "/v1/subscribe/decline"
    };
  }
}

